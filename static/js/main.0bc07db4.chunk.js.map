{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","console","log","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0bc07db4.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nexport default function Navbar(props) {\r\n    \r\n        return (\r\n            \r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n            {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                  \r\n                  <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n                </li> */}\r\n              </ul>\r\n              {/* <form className=\"d-flex\">\r\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n              </form> */}\r\n              <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n          );\r\n        }\r\n        \r\n    Navbar.propTypes = {title: PropTypes.string.isRequired,\r\n             aboutText: PropTypes.string.isRequired}\r\n\r\n             Navbar.defaultProps = {\r\n                 title: 'Set title here',\r\n                 aboutText: 'About'\r\n             }\r\n    \r\n\r\n","/* eslint-disable no-restricted-globals */\r\nimport React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = ()=> {\r\n    // console.log(\"Uppercase was Clicked: \" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase!\", \"success\");\r\n  }\r\n\r\n  const handleLoClick = ()=> {\r\n    // console.log(\"Uppercase was Clicked: \" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n\r\n  }\r\n\r\n  const handleOnClear = ()=> {\r\n    // console.log(\"Uppercase was Clicked: \" + text);\r\n    let newText = '';\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared\", \"success\");\r\n\r\n  }\r\n\r\n  const handleOnChange = ()=> {\r\n    console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  }\r\n\r\n  const handleCopy = ()=> {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to Clipboard\", \"success\");\r\n\r\n  }\r\n\r\n  const [text, setText] = useState('');\r\n  console.log(useState('Enter Text Here'));\r\n\r\n  //text = \"new text\";                     //Wrong way to change the state\r\n  //setText(\"new text\");                   //Correct way to change the state\r\n\r\n    return (       \r\n       <>\r\n        <div className = \"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>    \r\n          <h1 >{props.heading}</h1>\r\n          <div className=\"mb-3\">\r\n            {/* <label for=\"myBox\" class=\"form-label\">Example textarea</label> */}\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n          </div>\r\n          <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n          <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert To Lowercase</button>\r\n          <button className=\"btn btn-primary mx-1\" onClick={handleOnClear}>Clear Text</button>\r\n          <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n          <h2>Your Text Summary</h2>\r\n          <p>{text.split(\" \").length} Words and {text.length} Characters</p>\r\n          <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n          <h2>Preview</h2>\r\n          <p>{text.length>0?text:\"Enter something in the textbox above to preview it here :)\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');             //Whether dark mode is enabled or not\nconst [alert, setAlert] = useState(null);\n\nconst showAlert = (message, type)=>{\nsetAlert({\n  msg: message,\n  type: type\n})\nsetTimeout(() => {\n    setAlert(null)\n}, 1500);\n}\n const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled.\", \"success\");\n      document.title = 'Anikesh - Dark Mode';\n    }\n   else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled.\", \"success\");\n      document.title = 'Anikesh - Light Mode';\n\n  }\n}\n  return (\n    <>\n    {/* <Navbar title=\"Anikesh\" aboutText=\"About Text\" /> */}\n    {/* <Navbar/> */}\n    {/* <Router> */}\n    <Navbar title=\"Anikesh\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container  my-3\">\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the Text to Analyze Below\" mode={mode}/>\n          {/* </Route>\n        </Switch> */}\n    {/* <About/> */}\n    </div>\n        {/* </Router> */}\n    \n    </>\n  );\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}